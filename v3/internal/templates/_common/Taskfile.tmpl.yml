version: '3'

vars:
  APP_NAME: "{{.ProjectName}}"

tasks:

  ## -------------------------- Build -------------------------- ##

  build:
    summary: Builds the application
    cmds:
      - task: build:darwin
      - task: build:linux
      - task: build:windows


  ## --- Windows ---

  build:windows:
    summary: Builds the application for Windows
    platforms:
      - windows
    cmds:
      - task: build:frontend
      - go build -gcflags=all="-N -l" -o bin/{{.ProjectName}}.exe

  ## --- Darwin ---

  build:darwin:
    summary: Builds the application
    platforms:
      - darwin
    cmds:
      - task: build:frontend
      - go build -gcflags=all="-N -l" -o bin/{{.ProjectName}}
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"


  ## --- Linux ---

  build:linux:
    summary: Builds the application for Linux
    platforms:
      - linux
    cmds:
      - task: build:frontend
      - go build -gcflags=all="-N -l" -o bin/{{.ProjectName}}

  ## -------------------------- Package -------------------------- ##

  package:
    summary: Packages a production build of the application into a bundle
    cmds:
      # Target specific archs
      # - task: package:darwin:arm64
      # - task: package:darwin:amd64
      # - task: package:windows:arm64
      # - task: package:windows:amd64

      # Target current arch
      - task: package:darwin
      - task: package:windows

  ## --- Windows AMD64 ---

  build:app:prod:windows:amd64:
    summary: Packages a production build of the application into a `.exe` bundle
    platforms: [ windows/amd64 ]
    deps:
      - build:frontend
      - generate:icons
      - generate:syso:amd64
# --- Uncomment this to speed up builds, but you need to make sure `sources` includes all the files you need to build your binary
#    sources:
#      - "*"
#    generates:
#      - "bin/{{ "{{.APP_NAME}}" }}.exe"
    cmds:
      - task: generate:syso:amd64
      - GOOS=windows GOARCH=amd64 go build -tags production -ldflags="-w -s -H windowsgui" -o bin/{{ "{{.APP_NAME}}" }}.exe

  ## --- Windows ARM64 ---

  build:app:prod:windows:arm64:
    summary: Packages a production build of the application into a `.exe` bundle
    platforms: [ windows/arm64 ]
    deps:
      - build:frontend
      - generate:icons
      - generate:syso:arm64
    # --- Uncomment this to speed up builds, but you need to make sure `sources` includes all the files you need to build your binary
    #    sources:
    #      - "*"
    #    generates:
    #      - "bin/{{ "{{.APP_NAME}}" }}.exe"
    cmds:
      - task: generate:syso:arm64
      - GOOS=windows GOARCH=arm64 go build -tags production -ldflags="-w -s -H windowsgui" -o bin/{{ "{{.APP_NAME}}" }}.exe

  ## --- Windows Default ---

  build:app:prod:windows:
    summary: Packages a production build of the application into a `.exe` bundle
    platforms: [ windows ]
    deps:
      - generate:icons
      - generate:syso
# --- Uncomment this to speed up builds, but you need to make sure `sources` includes all the files you need to build your binary
#    sources:
#      - "*"
#    generates:
#      - "bin/{{ "{{.APP_NAME}}" }}.exe"
    cmds:
      - go build -tags production -ldflags="-w -s -H windowsgui" -o bin/{{ "{{.APP_NAME}}" }}.exe

## ------ Package Windows ------

  package:windows:arm64:
    summary: Packages a production build of the application into a `.exe` bundle
    cmds:
      - task: create:nsis:installer:arm64

  package:windows:amd64:
    summary: Packages a production build of the application into a `.exe` bundle
    cmds:
      - task: create:nsis:installer:amd64

  package:windows:
    summary: Packages a production build of the application into a `.exe` bundle
    cmds:
      - task: create:nsis:installer:{{ "{{ARCH}}" }}

  ## --- Darwin ARM64 ---

  package:darwin:arm64:
    summary: Packages a production build of the application into a `.app` bundle
    platforms: [ darwin/arm64 ]
    deps:
      - task: build:app:prod:darwin
        vars:
          ARCH: arm64
      - generate:icons
    cmds:
      - task: create:app:bundle

  ## --- Darwin AMD64 ---

  package:darwin:amd64:
    summary: Packages a production build of the application into a `.app` bundle
    platforms: [ darwin/amd64 ]
    deps:
      - task: build:app:prod:darwin
        vars:
          ARCH: amd64
      - generate:icons
    cmds:
      - task: create:app:bundle

  ## --- Darwin Default ---

  package:darwin:
    summary: Packages a production build of the application into a `.app` bundle
    platforms: [ darwin ]
    deps:
      - task: build:app:prod:darwin
      - generate:icons
    cmds:
      - task: create:app:bundle


  ## -------------------------- Misc -------------------------- ##

  create:app:bundle:
    summary: Creates an `.app` bundle
    cmds:
      - mkdir -p {{ "{{.APP_NAME}}" }}.app/Contents/{MacOS,Resources}
      - cp build/icons.icns {{ "{{.APP_NAME}}" }}.app/Contents/Resources
      - cp build/bin/{{ "{{.APP_NAME}}" }} {{ "{{.APP_NAME}}" }}.app/Contents/MacOS
      - cp build/Info.plist {{ "{{.APP_NAME}}" }}.app/Contents

  build:app:prod:darwin:
    summary: Creates a production build of the application
    cmds:
      - task: build:frontend
      - go build -tags production -ldflags="-w -s" -o build/bin/{{ "{{.APP_NAME}}" }}
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"


  build:app:prod:darwin:arm64:
    summary: Creates a production build of the application
    cmds:
      - task: build:frontend
      - GOOS=darwin GOARCH=arm64 go build -tags production -ldflags="-w -s" -o build/bin/{{ "{{.APP_NAME}}" }}
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"


  build:app:prod:darwin:amd64:
    summary: Creates a production build of the application
    cmds:
      - task: build:frontend
      - GOOS=darwin GOARCH=amd64 go build -tags production -ldflags="-w -s" -o build/bin/{{ "{{.APP_NAME}}" }}
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"

  generate:icons:
    summary: Generates Windows `.ico` and Mac `.icns` files from an image
    dir: build
    sources:
      - "appicon.png"
    generates:
      - "icons.icns"
      - "icons.ico"
    method: timestamp
    cmds:
      # Generates both .ico and .icns files
      - wails3 generate icons -input appicon.png

  generate:syso:arm64:
    summary: Generates Windows `.syso` file
    dir: build
    sources:
      - "icon.ico"
      - "wails.exe.manifest"
      - "info.json"
    generates:
      - "wails.syso"
    method: timestamp
    cmds:
      - wails3 generate syso -arch arm64 -icon icon.ico -manifest wails.exe.manifest -info info.json -out ../wails.syso

  generate:syso:amd64:
    summary: Generates Windows `.syso` file
    dir: build
    sources:
      - "icon.ico"
      - "wails.exe.manifest"
      - "info.json"
    generates:
      - "wails.syso"
    method: timestamp
    cmds:
      - wails3 generate syso -arch amd64 -icon icon.ico -manifest wails.exe.manifest -info info.json -out ../wails.syso

  generate:syso:
    summary: Generates Windows `.syso` file
    dir: build
    sources:
      - "icon.ico"
      - "wails.exe.manifest"
      - "info.json"
    generates:
      - "wails.syso"
    method: timestamp
    cmds:
      - wails3 generate syso -icon icon.ico -manifest wails.exe.manifest -info info.json -out ../wails.syso


  install:frontend:deps:
    summary: Install frontend dependencies
    dir: frontend
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/*
    preconditions:
      - sh: npm version
        msg: "Looks like npm isn't installed. Npm is part of the Node installer: https://nodejs.org/en/download/"
    cmds:
      - npm install

  build:frontend:
    summary: Build the frontend project
    dir: frontend
    sources:
      - "*"
    generates:
      - dist/*
    deps:
      - install:frontend:deps
    cmds:
      - npm run build

  create:nsis:installer:amd64:
    summary: Creates an NSIS installer
    dir: build/nsis
    sources:
      - "{{ "{{.ROOT_DIR}}"}}\\bin\\{{ "{{.APP_NAME}}"}}.exe"
    generates:
      - "{{ "{{.ROOT_DIR}}"}}\\bin\\{{ "{{.APP_NAME}}"}}-amd64-installer.exe"
    deps:
      - task: build:app:prod:windows:amd64
    cmds:
      - makensis -DARG_WAILS_AMD64_BINARY="{{ "{{.ROOT_DIR}}"}}\bin\{{ "{{.APP_NAME}}"}}.exe" project.nsi

  create:nsis:installer:arm64:
    summary: Creates an NSIS installer
    dir: build/nsis
    sources:
      - "{{ "{{.ROOT_DIR}}"}}\\bin\\{{ "{{.APP_NAME}}"}}.exe"
    generates:
      - "{{ "{{.ROOT_DIR}}"}}\\bin\\{{ "{{.APP_NAME}}"}}-arm64-installer.exe.exe"
    deps:
      - task: build:app:prod:windows:arm64
    cmds:
      - makensis -DARG_WAILS_ARM64_BINARY="{{ "{{.ROOT_DIR}}"}}\bin\{{ "{{.APP_NAME}}"}}.exe" project.nsi
