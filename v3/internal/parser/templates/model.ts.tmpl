{{$pkg := .Package}}
export namespace {{.Package}} {
    {{range $enumindex, $enumdef := .Enums}}
    {{- range $commentindex, $commentdef := .DocComments}}
        {{$commentdef -}}
    {{- end}}
    export enum {{$enumdef.Name}} {
        {{- range $constindex, $constdef := .Consts}}
        {{- if $constdef.DocComment}}
        // {{$constdef.DocComment}}
        {{- end}}
        {{$constdef.Name}} = {{$constdef.Value}},{{end}}
    }
    {{- end}}
    {{range $name, $def := .Models}}
    export class {{$def.Name}} {
        {{range $def.Fields}}{{.JSDef $pkg}}
        {{end}}
        constructor(source: Partial<{{$def.Name}}> = {}) {
            const { {{$def.DefaultValueList}} } = source;        {{range $def.Fields}}
            this.{{.JSName}} = {{.JSName}};{{end}}
        }

        static createFrom(source: string | object = {}): {{$def.Name}} {
            let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
            return new {{$def.Name}}(parsedSource as Partial<{{$def.Name}}>);
        }

    }
    {{end}}
}